[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    let g:airline#extensions#coc#enabled = 0
    let airline#extensions#coc#error_symbol = 'Error:'
    let airline#extensions#coc#warning_symbol = 'Warning:'
    let airline#extensions#coc#stl_format_err = '%E{[%e(#%fe)]}'
    let airline#extensions#coc#stl_format_warn = '%W{[%w(#%fw)]}'
'''

[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
depends = ['nerdtree']
hook_add = '''
    " Ctrl+Nで起動
    map <C-n> <plug>NERDTreeTabsToggle<CR>

    " 起動時に有効化
    let g:nerdtree_tabs_open_on_console_startup=1

    "引数なしでvimを開いたらNERDTreeを起動、
    "引数ありならNERDTreeは起動しない、引数で渡されたファイルを開く。
    autocmd vimenter * if !argc() | NERDTree | endif

    "他のバッファをすべて閉じた時にNERDTreeが開いていたらNERDTreeも一緒に閉じる。
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
    " Use tab for trigger completion with characters ahead and navigate.
    " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
    " other plugin before putting this into your config.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " GoTo code navigation.
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)


    " Symbol renaming.
    nmap <leader>rn <Plug>(coc-rename)

    " Formatting selected code.
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    "スペースhでHover
    nmap <silent> <space>h :<C-u>call CocAction('doHover')<cr>
'''

# カラースキーム系1
[[plugins]]
repo = 'jacoborus/tender.vim'

# カラースキーム系2
[[plugins]]
repo = 'ulwlu/elly.vim'

# カラースキーム系3
[[plugins]]
repo = 'nanotech/jellybeans.vim'

# コメントアウトしてくれるやつ
[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
    nmap <C-_> <Plug>(caw:hatpos:toggle)
    vmap <C-_> <Plug>(caw:hatpos:toggle)
'''
